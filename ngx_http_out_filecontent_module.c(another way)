/*
 *库文件
 */
#include <ngx_config.h>
#include <ngx_core.h>
#include <ngx_http.h>

/*字符串宏处理*/
#define OUT "out\n"

static char *ngx_http_out(ngx_conf_t * cf,ngx_command_t * cmd,void * conf);
/*命令集数组*/
static ngx_command_t ngx_http_out_command[] = {
  { ngx_string("out"),
	  NGX_HTTP_LOC_CONF | NGX_CONF_TAKE1,
	  ngx_http_out, /*注册函数*/
	  0,/*没有offset, 只支持一个context*/
	  0, /*没有offset, 只有配置结构体存在的时候，才会用到*/
	  NULL},
	 ngx_null_command 
};

/*上下文结构体*/
static ngx_http_module_t ngx_http_out_module_ctx = {
	NULL,		/*preconfiguration-------------*/
	NULL,		/*postconfiguration------------*/
	NULL,		/*create main configuration----*/
	NULL,		/*init-------------------------*/
	NULL,		/*create server configuration--*/
	NULL,		/*merge------------------------*/
	NULL,		/*create location configuration*/
	NULL		/*merge------------------------*/
};

/*模块结构体，注:模块结构体不能设置为static*/
ngx_module_t ngx_http_out_module = {
	NGX_MODULE_V1,
	&ngx_http_out_module_ctx,
	ngx_http_out_command,
	NGX_HTTP_MODULE,
	NULL,	/*init master*/
	NULL,   /*init module*/
	NULL,	/*init process*/
	NULL,	/*init thread*/
	NULL,	/*out thread*/
	NULL,	/*out process*/
	NULL,	/*out master*/
	NGX_MODULE_V1_PADDING
};

ngx_str_t filename;
/*step 3 headers*/
static ngx_int_t  ngx_add_headerout(ngx_http_request_t *r) {
	r->headers_out.content_type_len = sizeof("text/html") - 1;
	r->headers_out.content_type.len = sizeof("text/html") - 1;
	r->headers_out.content_type.data = (u_char *) "text/html";
 	r->headers_out.status = NGX_HTTP_OK;
	return NGX_OK;
}

/*step 5*/
/*final out*/
static ngx_int_t ngx_final_out(ngx_http_request_t *r, ngx_chain_t *out) {
	ngx_buf_t *b = out->buf;
	ngx_int_t rc;
	
	rc = ngx_http_output_filter(r, out);
	ngx_pool_cleanup_t *cln = ngx_pool_cleanup_add(r->pool,
					sizeof(ngx_pool_cleanup_file_t));
	if(cln == NULL){
		return NGX_ERROR;
	}	
	cln->handler = ngx_pool_cleanup_file;
	ngx_pool_cleanup_file_t *clnf = cln->data;
	clnf->fd = b->file->fd;
	clnf->name = b->file->name.data;
	clnf->log = r->pool->log;
	
	return rc;
}

/*step 4*/
/*out body*/
static ngx_int_t ngx_add_outfile_body(ngx_http_request_t *r) {
	ngx_buf_t *b;
	ngx_chain_t out;
	
	b = ngx_pcalloc(r->pool, sizeof(ngx_buf_t));
	if(b == NULL) {
		return NGX_HTTP_INTERNAL_SERVER_ERROR;
	}	
	
	b->in_file = 1;	/* is a file ,not the memory */	
	b->file = ngx_pcalloc(r->pool, sizeof(ngx_file_t));
	b->file->fd = ngx_open_file(filename.data, NGX_FILE_RDONLY|NGX_FILE_NONBLOCK, NGX_FILE_OPEN, 0);
	b->file->log = r->connection->log;
	b->file->name.data = filename.data;
	b->file->name.len = filename.len;
	
	if(b->file->fd <= 0) {
		return NGX_HTTP_NOT_FOUND;
	}
	
	if(ngx_file_info(filename.data, &b->file->info) == NGX_FILE_ERROR){
		return NGX_HTTP_INTERNAL_SERVER_ERROR;
	}
	
	r->headers_out.content_length_n = b->file->info.st_size;
	 ngx_http_send_header(r);
	b->file_pos = 0;
	b->file_last = b->file->info.st_size;
	b->last_buf = 1;
	
	out.buf = b;
	out.next = NULL;
	return ngx_final_out(r, &out);
}
/*step 2*/
/*handler function*/
static ngx_int_t ngx_http_out_handler(ngx_http_request_t *r){
	ngx_int_t rc;
	/*add out header*/
	rc = ngx_add_headerout(r);
	if(rc != NGX_OK) {
		return NGX_ERROR;
	}
	/*add out file  body*/
	rc = ngx_add_outfile_body(r);
	if(rc != NGX_OK) {
		return NGX_ERROR;
	}
	
	return rc;
}

/*handler注册函数*/
/*step 1*/
static char *ngx_http_out(ngx_conf_t *cf, ngx_command_t *cmd, void *conf) {
	ngx_http_core_loc_conf_t *clcf;			/*定义一个指向core location的指针*/
	ngx_str_t *value;
	
	value = cf->args->elts;
	filename = value[1];
	
	/*注册handler*/
	clcf = ngx_http_conf_get_module_loc_conf(cf,ngx_http_core_module);
	clcf->handler = ngx_http_out_handler;

	return NGX_OK;
}







